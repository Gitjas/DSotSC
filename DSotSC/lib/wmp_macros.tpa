/////////////////////////////////////////////////////////////////////////////////////////////////////////
//BEGIN Macros
/////////////////////////////////////////////////////////////////////////////////////////////////////////

//Dumps the areas and links of a .wmp file to textual data
DEFINE_PATCH_FUNCTION ~dump_wmp~
	INT_VAR
		tra_read = 0
		move_x = 0
		move_y = 0
		compare_bams = 0
		skip_areas = 0
		skip_links = 0
	STR_VAR
		2da_links_array = ""
		icons_array = ""
		tra = ""
		output_areas = EVAL "%SOURCE_RES%_areas.2da"
		output_links = EVAL "%SOURCE_RES%_links.2da"
		output_strings = EVAL "%SOURCE_RES%_trans.tra"
	BEGIN
	SPRINT tilde "~"
	SPRINT quote ~"~
	SPRINT area_string "SHORT_NAME CONTENT LONG_NAME FLAGS BAM_ANIM X_POS Y_POS NAME TOOLTIP LOAD_IM%LNL%"
	SPRINT link_string "SRC_AREA SRC_NWSE TARGET_ARE ENTRY_NAME TRV_TIME DEF_ENTRY ENC1 ENC2 ENC3 ENC4 ENC5 ENC_PROB%LNL%"
	SPRINT trans_string ""
	SPRINT area_log ""
	READ_LONG 0x30 na
	READ_LONG 0x34 ao
	READ_LONG 0x38 lo
	FOR (i=0;i<na;++i) BEGIN
		READ_ASCII ao + 0xf0*i area
		PATCH_IF (skip_areas = 0) BEGIN
			READ_LONG ao + 0xf0*i + 0x30 flags
			READ_LONG ao + 0xf0*i + 0x34 bam
			PHP_EACH "%icons_array%" AS "compare" => "icon" BEGIN
				PATCH_IF (~%area%~ STRING_EQUAL_CASE ~%compare%~) BEGIN
					SPRINT area_log ~%area_log% %area%~
					PATCH_PRINT ~%area% wmp icon patching: %bam% -> %icon%~
					SET bam = icon
				END
			END
			PATCH_IF (compare_bams = 1) BEGIN
				PHP_EACH "%icons_array%" AS "compare" => "icon" BEGIN
					PATCH_IF (~%bam%~ STRING_EQUAL_CASE ~%compare_1%~) AND (~%area_log%~ STRING_CONTAINS_REGEXP ~%area%~) BEGIN
						SPRINT area_log ~%area_log% %area%~
						PATCH_PRINT ~%area% wmp icon patching: %bam% -> %icon%~
						SET bam = icon
					END
				END
			END
			READ_LONG ao + 0xf0*i + 0x38 xcor
			SET xcor = xcor + move_x
			READ_LONG ao + 0xf0*i + 0x3c ycor
			SET ycor = ycor + move_y
			//READ_ASCII ao + 0xf0*i + 0x48 load
			SPRINT load N
			READ_LONG ao + 0xf0*i + 0x40 name
			READ_LONG ao + 0xf0*i + 0x44 tool
			PATCH_IF (tra_read = 0) BEGIN
				PATCH_IF (name < 0) BEGIN
					SPRINT name ~~
					SPRINT tool ~~
				END ELSE BEGIN
					READ_STRREF ao + 0xf0*i + 0x40 name
					READ_STRREF ao + 0xf0*i + 0x44 tool
				END
			END ELSE BEGIN
				INNER_ACTION BEGIN
					ACTION_IF (FILE_CONTAINS_EVALUATED (~%tra%~ ~^[ 	]*@%name%[ 	]*=[ 	]*[%tilde%%quote%]\(.*\)[%tilde%%quote%][^%tilde%^%quote%]*$~)) BEGIN
						COPY - ~%tra%~ ~%tra%~
							REPLACE_EVALUATE CASE_INSENSITIVE ~^[ 	]*@%name%[ 	]*=[ 	]*[%tilde%%quote%]\(.*\)[%tilde%%quote%][^%tilde%^%quote%]*$~ BEGIN
								SPRINT name "%MATCH1%"
								SPRINT tool "%MATCH1%"
							END
							~~
					END ELSE BEGIN
						OUTER_SPRINT name ~~
						OUTER_SPRINT tool ~~
					END
				END
			END
			SET doOnce = 0
			PATCH_FOR_EACH var IN name tool BEGIN
				SPRINT content EVAL "%%var%%"
				PATCH_IF ("%content%" STRING_EQUAL_CASE "") BEGIN
					SPRINT EVAL "%var%" N
				END ELSE BEGIN
					INNER_PATCH_SAVE content "%content%" BEGIN
						REPLACE_TEXTUALLY " " "###"
					END
					PATCH_IF (doOnce = 0) BEGIN
						SPRINT trans_string "%trans_string%@%area% = %quote%%content%%quote%%LNL%"
						SET doOnce = 1
					END
					SPRINT EVAL "%var%" "@%area%"
				END
			END
			SPRINT area_string "%area_string%%area% %area% %area% %flags% %bam% %xcor% %ycor% %name% %tool% %load%%LNL%"
		END
		PATCH_IF (skip_links = 0) BEGIN
			PATCH_FOR_EACH j IN 0 3 2 1 BEGIN
				READ_LONG ao + 0xf0*i + 0x50 + 0x8*j li
				READ_LONG ao + 0xf0*i + 0x54 + 0x8*j nl
				FOR (k=0;k<nl;++k) BEGIN
					READ_LONG lo + 0xd8*(li + k) target
					READ_ASCII ao + 0xf0*target target_are
					READ_ASCII lo + 0xd8*(li + k) + 0x4 entry (32) NULL
					READ_LONG lo + 0xd8*(li + k) + 0x24 time
					READ_LONG lo + 0xd8*(li + k) + 0x28 flags
					READ_ASCII lo + 0xd8*(li + k) + 0x2c enc1
					READ_ASCII lo + 0xd8*(li + k) + 0x34 enc2
					READ_ASCII lo + 0xd8*(li + k) + 0x3c enc3
					READ_ASCII lo + 0xd8*(li + k) + 0x44 enc4
					READ_ASCII lo + 0xd8*(li + k) + 0x4c enc5
					READ_LONG lo + 0xd8*(li + k) + 0x54 prob
					PATCH_FOR_EACH var IN entry enc1 enc2 enc3 enc4 enc5 BEGIN
						SPRINT content EVAL "%%var%%"
						/*INNER_PATCH_SAVE content ~%content%~ BEGIN
							REPLACE_EVALUATE CASE_INSENSITIVE ~ ~ BEGIN
								PATCH_PRINT ~link %area% -> %target_are%: %content% whitespace changed to ###~
							END
							~###~
						END*/
						PATCH_IF ("%content%" STRING_EQUAL_CASE "") BEGIN
							SPRINT EVAL "%var%" N
						END ELSE PATCH_IF (("%content%" STRING_CONTAINS_REGEXP " ")=0) BEGIN
							PATCH_PRINT ~link %area% -> %target_are%: %content% is replaced with N~
							SPRINT EVAL "%var%" N
						END ELSE PATCH_IF (("%content%" STRING_MATCHES_REGEXP "[a-z0-9_']+")=1) BEGIN
							PATCH_WARN "link %area% -> %target_are%: check if %content% is valid" 
							//PATCH_PRINT "link %area% -> %target_are%: %content% is replaced with N"
							//SPRINT EVAL "%var%" N
						END
					END
					INNER_PATCH_SAVE nesw "%j%" BEGIN
						REPLACE_TEXTUALLY 0 N
						REPLACE_TEXTUALLY 1 W
						REPLACE_TEXTUALLY 2 S
						REPLACE_TEXTUALLY 3 E
					END
					PATCH_IF (("%link_string%" STRING_CONTAINS_REGEXP "%area% %nesw% %target_are% %entry% %time% %flags% %enc1% %enc2% %enc3% %enc4% %enc5% %prob%")=0) BEGIN
						PATCH_PRINT ~Skipping duplicated link: %area% %nesw% %target_are% %entry% %time% %flags% %enc1% %enc2% %enc3% %enc4% %enc5% %prob%~
					END ELSE BEGIN
						SPRINT link_string "%link_string%%area% %nesw% %target_are% %entry% %time% %flags% %enc1% %enc2% %enc3% %enc4% %enc5% %prob%%LNL%"
					END
				END
			END
		END
	END
	INNER_ACTION BEGIN
		ACTION_PHP_EACH "%2da_links_array%" AS "source" => "file" BEGIN
			COPY_EXISTING - ~%file%.2da~ ~override~
				PRETTY_PRINT_2DA
				REPLACE_TEXTUALLY ~\*~ ~N~
				REPLACE_EVALUATE CASE_INSENSITIVE ~^[0-9]+[ ]+\([A-Za-z0-9#]+\)+[ ]+\([0-9]+\)[ ]+\([A-Za-z0-9#]+\)[ ]+\([0-9]+\)[ ]+\([0-9]+\)[ ]+\([A-Za-z0-9#]+\)[ ]+\([A-Za-z0-9#]+\)[ ]+\([A-Za-z0-9#]+\)[ ]+\([A-Za-z0-9#]+\)[ ]+\([A-Za-z0-9#]+\)[ ]+\([A-Za-z0-9#]+\)$~ BEGIN
					SPRINT nesw ~%MATCH11%~
					INNER_PATCH_SAVE nesw "%nesw%" BEGIN
						REPLACE_TEXTUALLY 0 N
						REPLACE_TEXTUALLY 1 W
						REPLACE_TEXTUALLY 2 S
						REPLACE_TEXTUALLY 3 E
					END
					PATCH_IF (("%link_string%" STRING_CONTAINS_REGEXP "%source% %nesw% %MATCH1% %MATCH3% %MATCH4% %MATCH2% %MATCH6% %MATCH7% %MATCH8% %MATCH9% %MATCH10% %MATCH5%")=0) BEGIN
						PATCH_PRINT ~Skipping duplicated link: %source% %nesw% %MATCH1% %MATCH3% %MATCH4% %MATCH2% %MATCH6% %MATCH7% %MATCH8% %MATCH9% %MATCH10% %MATCH5%~
					END ELSE BEGIN
						SPRINT link_string "%link_string%%source% %nesw% %MATCH1% %MATCH3% %MATCH4% %MATCH2% %MATCH6% %MATCH7% %MATCH8% %MATCH9% %MATCH10% %MATCH5%%LNL%"
					END
				END
				~~
		END
<<<<<<<< ...blank
>>>>>>>>
		ACTION_IF (skip_areas = 0) BEGIN
			COPY + ~...blank~ ~%output_areas%~
				INSERT_BYTES 0 STRING_LENGTH "%area_string%"
				WRITE_ASCIIE 0 "%area_string%"
				PRETTY_PRINT_2DA
				REPLACE_TEXTUALLY ~^[ ]+~ ~~
			COPY + ~...blank~ ~%output_strings%~
				INSERT_BYTES 0 STRING_LENGTH "%trans_string%"
				WRITE_ASCIIE 0 "%trans_string%"
		END
		ACTION_IF (skip_links = 0) BEGIN
			COPY + ~...blank~ ~%output_links%~
				INSERT_BYTES 0 STRING_LENGTH "%link_string%"
				WRITE_ASCIIE 0 "%link_string%"
				PRETTY_PRINT_2DA
				REPLACE_TEXTUALLY ~^[ ]+~ ~~
		END
	END
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_MACRO ~read_area_array_from_2da~ BEGIN
	LOCAL_SPRINT fl#r2en_area ""
	LOCAL_SET i = 0
	LOCAL_SPRINT area ""
	LOCAL_SPRINT short ""
	LOCAL_SPRINT long ""
	LOCAL_SET flags = 0
	LOCAL_SET bam = 0
	LOCAL_SET x_cor = 0
	LOCAL_SET y_cor = 0
	LOCAL_SPRINT name ""
	LOCAL_SPRINT tool ""
	LOCAL_SPRINT load ""
	LOCAL_SPRINT var ""
	LOCAL_SPRINT cmp ""
	LOCAL_SPRINT array ""

	PATCH_PRINT ~read_area_array_from_2da~
	READ_2DA_ENTRIES_NOW fl#r2en_area 10
	FOR (i=0;i<fl#r2en_area;++i) BEGIN
		READ_2DA_ENTRY_FORMER fl#r2en_area i 0 area
		READ_2DA_ENTRY_FORMER fl#r2en_area i 1 short
		READ_2DA_ENTRY_FORMER fl#r2en_area i 2 long
		READ_2DA_ENTRY_FORMER fl#r2en_area i 3 flags
		READ_2DA_ENTRY_FORMER fl#r2en_area i 4 bam
		READ_2DA_ENTRY_FORMER fl#r2en_area i 5 x_cor
		READ_2DA_ENTRY_FORMER fl#r2en_area i 6 y_cor
		READ_2DA_ENTRY_FORMER fl#r2en_area i 7 name
		READ_2DA_ENTRY_FORMER fl#r2en_area i 8 tool
		READ_2DA_ENTRY_FORMER fl#r2en_area i 9 load
		//PATCH_PRINT ~%area% %short% %long% %flags% %bam% %x_cor% %y_cor% %name% %tool% %load%~
		TO_LOWER area
		TO_UPPER name
		TO_UPPER tool
		PATCH_IF "%area%" STRING_COMPARE_CASE SHORT_NAME AND
		"%area%" STRING_COMPARE_CASE CONTENT AND
		FILE_EXISTS_IN_GAME "%area%.are" BEGIN
			PATCH_IF !VARIABLE_IS_SET $fl#CONTENT("%area%") BEGIN
				SET $fl#CONTENT("%area%") = 0
			END
			SPRINT $fl#SHORT("%area%") "%short%"
			SPRINT $fl#LONG("%area%") "%long%"
			SET $fl#FLAGS("%area%") = flags
			SET $fl#BAM("%area%") = bam
			SET $fl#XCOR("%area%") = x_cor
			SET $fl#YCOR("%area%") = y_cor
			PATCH_FOR_EACH var IN name tool load BEGIN
				SPRINT cmp EVAL "%%var%%"
				SPRINT array "%var%"
				TO_UPPER array
				PATCH_IF "%cmp%" STRING_COMPARE_CASE N BEGIN
					SPRINT $EVAL "fl#%array%"("%area%") EVAL "%%var%%"
				END
			END
		END
	END
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_MACRO ~read_link_array_from_2da~ BEGIN
	LOCAL_SPRINT fl#r2en_link ""
	LOCAL_SET i = 0
	LOCAL_SPRINT src ""
	LOCAL_SPRINT j ""
	LOCAL_SPRINT trgt ""
	LOCAL_SPRINT entry ""
	LOCAL_SET time = 0
	LOCAL_SET def = 0
	LOCAL_SPRINT enc1 ""
	LOCAL_SPRINT enc2 ""
	LOCAL_SPRINT enc3 ""
	LOCAL_SPRINT enc4 ""
	LOCAL_SPRINT enc5 ""
	LOCAL_SET prob = 0
	LOCAL_SPRINT var ""
	LOCAL_SPRINT cmp ""
	LOCAL_SPRINT array ""

	PATCH_PRINT ~read_link_array_from_2da~
	SET $j_array(n) = 0
	SET $j_array(e) = 3
	SET $j_array(s) = 2
	SET $j_array(w) = 1
	READ_2DA_ENTRIES_NOW fl#r2en_link 12
	FOR (i=0;i<fl#r2en_link;++i) BEGIN
		READ_2DA_ENTRY_FORMER fl#r2en_link i 0  src
		READ_2DA_ENTRY_FORMER fl#r2en_link i 1  j
		READ_2DA_ENTRY_FORMER fl#r2en_link i 2  trgt
		READ_2DA_ENTRY_FORMER fl#r2en_link i 3  entry
		READ_2DA_ENTRY_FORMER fl#r2en_link i 4  time
		READ_2DA_ENTRY_FORMER fl#r2en_link i 5  def
		READ_2DA_ENTRY_FORMER fl#r2en_link i 6  enc1
		READ_2DA_ENTRY_FORMER fl#r2en_link i 7  enc2
		READ_2DA_ENTRY_FORMER fl#r2en_link i 8  enc3
		READ_2DA_ENTRY_FORMER fl#r2en_link i 9  enc4
		READ_2DA_ENTRY_FORMER fl#r2en_link i 10 enc5
		READ_2DA_ENTRY_FORMER fl#r2en_link i 11 prob
		//PATCH_PRINT ~%src% %j% %trgt% %entry% %time% %def% %enc1% %enc2% %enc3% %enc4% %enc5% %prob%~
		TO_LOWER src
		TO_LOWER j
		TO_LOWER trgt
		PATCH_IF ("%src%" STRING_COMPARE_CASE SRC_AREA AND
		"%trgt%" STRING_COMPARE_CASE TARGET_AREA AND
		"%trgt%" STRING_COMPARE_CASE TARGET_ARE) AND
		(!VARIABLE_IS_SET $fl#LINK_BLACKLIST("%src%" "%j%" "%trgt%") OR
		(VARIABLE_IS_SET $fl#LINK_BLACKLIST("%src%" "%j%" "%trgt%") AND
		$fl#LINK_BLACKLIST("%src%" "%j%" "%trgt%") = 0)) AND
		FILE_EXISTS_IN_GAME "%src%.are" AND
		FILE_EXISTS_IN_GAME "%trgt%.are" BEGIN
			j = $j_array("%j%")
			PATCH_IF !VARIABLE_IS_SET $EVAL "fl#INDEX_%j%"("%src%" "%trgt%") BEGIN
				SET $EVAL "fl#INDEX_%j%"("%src%" "%trgt%") = 0
			END
			SET $fl#TIME("%src%" "%j%" "%trgt%") = time
			SET $fl#DEF("%src%" "%j%" "%trgt%") = def
			PATCH_FOR_EACH var IN entry enc1 enc2 enc3 enc4 enc5 BEGIN
				SPRINT cmp EVAL "%%var%%"
				SPRINT array "%var%"
				TO_UPPER array
				PATCH_IF "%cmp%" STRING_COMPARE_CASE N BEGIN
					SPRINT $EVAL "fl#%array%"("%src%" "%j%" "%trgt%") "%cmp%"
				END
			END
			SET $fl#PROB("%src%" "%j%" "%trgt%") = prob
		END
	END
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_MACRO ~read_trans_array_from_2da~ BEGIN
	LOCAL_SPRINT fl#r2en_trans ""
	LOCAL_SET i = 0
	LOCAL_SPRINT id ""
	LOCAL_SPRINT string ""

	PATCH_PRINT ~read_trans_array_from_2da~
	READ_2DA_ENTRIES_NOW fl#r2en_trans 3
	FOR (i=0;i<fl#r2en_trans;++i) BEGIN
		READ_2DA_ENTRY_FORMER fl#r2en_trans i 0 id
		READ_2DA_ENTRY_FORMER fl#r2en_trans i 2 string
		TO_UPPER id
		PATCH_IF "%id%" STRING_MATCHES_REGEXP "^@" = 0 BEGIN
			INNER_PATCH_SAVE string "%string%" BEGIN
				REPLACE_TEXTUALLY "###" " "
				REPLACE_TEXTUALLY ~"~ ~~ //" //This is a stupid hack to get around a deficiency in my editor
				REPLACE_TEXTUALLY "~" ""
			END
			SPRINT $fl#TRANS("%id%") "%string%"
		END
	END
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_MACRO ~read_blacklist_array_from_2da~ BEGIN
	LOCAL_SPRINT fl#r2en_blacklist ""
	LOCAL_SET i = 0
	LOCAL_SPRINT src ""
	LOCAL_SPRINT j ""
	LOCAL_SPRINT trgt ""

	READ_2DA_ENTRIES_NOW fl#r2en_blacklist 3
	FOR (i = 0; i < fl#r2en_blacklist; ++i) BEGIN
		READ_2DA_ENTRY_FORMER fl#r2en_blacklist i 0 src
		READ_2DA_ENTRY_FORMER fl#r2en_blacklist i 1 j
		READ_2DA_ENTRY_FORMER fl#r2en_blacklist i 2 trgt
		TO_LOWER src
		TO_LOWER j
		TO_LOWER trgt
		SET $fl#LINK_BLACKLIST("%src%" "%j%" "%trgt%") = 1
	END
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_MACRO ~apply_link_patches~ BEGIN
	LOCAL_SPRINT r2en_patches ""
	LOCAL_SET result = 0
	LOCAL_SET i = 0
	LOCAL_SET j = 0
	LOCAL_SPRINT source ""
	LOCAL_SPRINT nesw ""
	LOCAL_SPRINT target ""
	LOCAL_SPRINT entry ""
	LOCAL_SET dist = 0
	LOCAL_SET def_entry = 0
	LOCAL_SPRINT enc1 ""
	LOCAL_SPRINT enc2 ""
	LOCAL_SPRINT enc3 ""
	LOCAL_SPRINT enc4 ""
	LOCAL_SPRINT enc5 ""
	LOCAL_SET enc_prob = 0
	LOCAL_SET j = 0
	LOCAL_SPRINT var ""
	LOCAL_SPRINT cmp ""
	LOCAL_SPRINT array ""

	SET $j_array(n) = 0
	SET $j_array(e) = 3
	SET $j_array(s) = 2
	SET $j_array(w) = 1
	READ_2DA_ENTRIES_NOW r2en_patches 13

	//Barf indeed, but I can't think of a better solution atm
	FOR (i = 0; i < r2en_patches; ++i) BEGIN
		READ_2DA_ENTRY_FORMER r2en_patches i 12 id
		PATCH_IF "%id%" STRING_COMPARE_CASE NN BEGIN
			SET $fl#patches("%id%") = 0
		END
	END
	FOR (i = 0; i < r2en_patches; ++i) BEGIN
		READ_2DA_ENTRY_FORMER r2en_patches i 12 id
		PATCH_IF !"%id%" STRING_EQUAL_CASE NN AND $fl#patches("%id%") = 0 BEGIN
			FOR (j = 0; j < r2en_patches; ++j) BEGIN
				READ_2DA_ENTRY_FORMER r2en_patches j 12 id2
				PATCH_IF j > i AND id = id2 BEGIN
					SET $fl#patches("%id%") = 1
					READ_2DA_ENTRY_FORMER r2en_patches j 0 source
					READ_2DA_ENTRY_FORMER r2en_patches j 1 nesw
					READ_2DA_ENTRY_FORMER r2en_patches j 2 target
					READ_2DA_ENTRY_FORMER r2en_patches j 3 entry
					READ_2DA_ENTRY_FORMER r2en_patches j 4 dist
					READ_2DA_ENTRY_FORMER r2en_patches j 5 def_entry
					READ_2DA_ENTRY_FORMER r2en_patches j 6 enc1
					READ_2DA_ENTRY_FORMER r2en_patches j 7 enc2
					READ_2DA_ENTRY_FORMER r2en_patches j 8 enc3
					READ_2DA_ENTRY_FORMER r2en_patches j 9 enc4
					READ_2DA_ENTRY_FORMER r2en_patches j 10 enc5
					READ_2DA_ENTRY_FORMER r2en_patches j 11 enc_prob
					TO_LOWER source
					TO_LOWER nesw
					TO_LOWER target
					PATCH_IF "%source%" STRING_COMPARE_CASE SRC_AREA AND
					"%target%" STRING_COMPARE_CASE TARGET_ARE BEGIN
						j = $j_array("%nesw%")
						PATCH_IF VARIABLE_IS_SET $EVAL "fl#INDEX_%j%"("%source%" "%target%") BEGIN
							SPRINT $fl#ENTRY("%source%" "%j%" "%target%") "%entry%"
							SET $fl#TIME("%source%" "%j%" "%target%") = dist
							SET $fl#DEF("%source%" "%j%" "%target%") = def_entry
							PATCH_FOR_EACH var IN enc1 enc2 enc3 enc4 enc5 BEGIN
								SPRINT cmp EVAL "%%var%%"
								SPRINT array "%var%"
								TO_UPPER array
								PATCH_IF "%cmp%" STRING_COMPARE_CASE N BEGIN
									SPRINT $EVAL "fl#%array%"("%source%" "%j%" "%target%") "%cmp%"
								END
							END
							SET $fl#PROB("%source%" "%j%" "%target%") = enc_prob
						END
					END
					j = r2en_patches
				END
			END
		END
	END
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_MACRO ~merge_in_translations~ BEGIN
	LOCAL_SPRINT array ""
	LOCAL_SPRINT area ""
	LOCAL_SPRINT result ""

	//Swap the tra references for the associated string
	ACTION_FOR_EACH array IN fl#NAME fl#TOOL BEGIN
		ACTION_PHP_EACH "%array%" AS area => result BEGIN
			ACTION_IF VARIABLE_IS_SET $fl#TRANS("%result%") BEGIN
				OUTER_SPRINT $EVAL "%array%"("%area%") $fl#TRANS("%result%")
			END
		END
	END

	//If there are tra references for which there was no data provided, null the array value
	ACTION_FOR_EACH array IN fl#NAME fl#TOOL BEGIN
		ACTION_PHP_EACH "%array%" AS area => result BEGIN
			ACTION_IF "%result%" STRING_MATCHES_REGEXP "^@.*" = 0 BEGIN
				OUTER_SPRINT $EVAL "%array%"("%area%") ""
			END
		END
	END
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION ~fix_table~ BEGIN
	REPLACE_TEXTUALLY EVALUATE_REGEXP ~\([0-9]+\)\(SHORT_NAME\)~ ~\1%LNL%%LNL%\2~
	REPLACE_TEXTUALLY EVALUATE_REGEXP ~\([0-9]+\)\(//\)~ ~\1%LNL%%LNL%\2~
	REPLACE_TEXTUALLY EVALUATE_REGEXP ~~~~~\("\|~\|%\)\(@\)~~~~~ ~~~~~\1%LNL%%LNL%\2~~~~~
	REPLACE_TEXTUALLY EVALUATE_REGEXP ~~~~~\("\|~\|%\)\(//\)~~~~~ ~~~~~\1%LNL%%LNL%\2~~~~~
END
